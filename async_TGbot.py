from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup
import os
import json
import openai
import aiohttp
import requests
from moviepy.editor import *
import matplotlib.pyplot as plt
import io
from telegram import InputFile
from datetime import datetime

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.environ.get("TOKEN")
WEATHER_API_KEY = os.environ.get("WEATHER_API_KEY")
GPT_SECRET_KEY = os.environ.get("GPT_SECRET_KEY")

openai.api_key = GPT_SECRET_KEY

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞
ENTER_WEIGHT = range(1)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –°—Ç–∞—Ç—É—Å—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
WEIGHT, HEIGHT, AGE, ACTIVITY, CITY = range(5)

# –§—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update, context):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "Start"
    keyboard = [["Start"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—ã –≤–æ–¥—ã üíß, –∫–∞–ª–æ—Ä–∏–π üçè, —Ç—Ä–µ–∫–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üèÉ‚Äç‚ôÇÔ∏è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç–º–æ—Ü–∏–∏ üòÉ. "
        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile.\n\n"
        "–î–∞–ª–µ–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: /show_progress - –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤, /log_water - —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã, /log_food - —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –µ–¥—ã, /log_workout - —Ñ–∏–∫—Å–∞—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, /fer - —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π –ø–æ —Ñ–æ—Ç–æ, /check_progress - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∏—Ü–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–∏.\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ChatGPT —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /chat <–≤–∞—à –≤–æ–ø—Ä–æ—Å>.",
        reply_markup=reply_markup
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def set_profile(update, context):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    return WEIGHT

async def weight(update, context):
    context.user_data["weight"] = int(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    return HEIGHT

async def height(update, context):
    context.user_data["height"] = int(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return AGE

async def age(update, context):
    context.user_data["age"] = int(update.message.text)
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    return ACTIVITY

async def activity(update, context):
    context.user_data["activity"] = int(update.message.text)
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    return CITY

async def city(update, context):
    user_id = update.message.from_user.id
    context.user_data["city"] = update.message.text
    users[user_id] = {
        "weight": context.user_data["weight"],
        "height": context.user_data["height"],
        "age": context.user_data["age"],
        "activity": context.user_data["activity"],
        "city": context.user_data["city"],
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0
    }

    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    return ConversationHandler.END

# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π
def get_recommendations(emotion_data, temperature):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â—É—é —ç–º–æ—Ü–∏—é
    dominant_emotion = max(emotion_data, key=emotion_data.get)
    recommendations = {
        "angry": {
            "activity": "–±–æ–∫—Å –∏–ª–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –±–µ–≥",
            "duration": 40,
            "calories": 400
        },

        "disgust": {
            "activity": "–π–æ–≥–∞ –∏–ª–∏ –ø–∏–ª–∞—Ç–µ—Å",
            "duration": 30,
            "calories": 150
        },

        "fear": {
            "activity": "–ª–µ–≥–∫–∞—è –ø—Ä–æ–±–µ–∂–∫–∞ –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞",
            "duration": 20,
            "calories": 100
        },

        "happy": {
            "activity": "—Ç–∞–Ω—Ü—ã –∏–ª–∏ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞",
            "duration": 60,
            "calories": 300
        },

        "neutral": {
            "activity": "—Ö–æ–¥—å–±–∞ –∏–ª–∏ —Ä–∞—Å—Ç—è–∂–∫–∞",
            "duration": 20,
            "calories": 50
        },

        "sad": {
            "activity": "–π–æ–≥–∞ –∏–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
            "duration": 30,
            "calories": 100
        },

        "surprise": {
            "activity": "–∏–≥—Ä–∞ –≤ –≤–æ–ª–µ–π–±–æ–ª –∏–ª–∏ –±—ã—Å—Ç—Ä—ã–µ –∫–∞—Ä–¥–∏–æ-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
            "duration": 25,
            "calories": 200
        }
    }

    recommendation = recommendations.get(dominant_emotion, {"activity": "–æ—Ç–¥—ã—Ö", "duration": 0, "calories": 0})

    # –£—á–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if temperature > 30:
        recommendation["activity"] += " (–≤ –ø–æ–º–µ—â–µ–Ω–∏–∏)"
    elif temperature < 10:
        recommendation["activity"] += " (–≤ —Ç–µ–ø–ª–æ–º –º–µ—Å—Ç–µ –∏–ª–∏ –∑–∞–ª–µ)"
    return dominant_emotion, recommendation

# –û–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é fer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ—Ü–∏–π –∏ –≤—ã–¥–∞—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def fer(update, context):
    await update.message.reply_text('–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç —Ç–µ–±—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ò–¥—ë—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π...')

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    imageurl = await update.message.document.get_file()
    headers = {'Content-type': 'application/json'}
    data = {'url': imageurl['file_path']}

    async with aiohttp.request(
        method='POST', 
        url='http://127.0.0.1:5000/detect_emotion', 
        data=json.dumps(data), 
        headers=headers
    ) as response:
        res = await response.json()

        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–∏
        emotion_data = res.get("message", {})

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.message.from_user.id
        if user_id in users:
            city = users[user_id].get("city", "–ú–æ—Å–∫–≤–∞")
        else:
            city = "–ú–æ—Å–∫–≤–∞"

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        weather_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&appid={WEATHER_API_KEY}"
        weather_response = requests.get(weather_url).json()
        temperature = weather_response.get("main", {}).get("temp", 20)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–π –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        dominant_emotion, recommendation = get_recommendations(emotion_data, temperature)

        await update.message.reply_text(
            f"–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∞—è —ç–º–æ—Ü–∏—è: {dominant_emotion.capitalize()}\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
            f"- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {recommendation['activity']}\n"
            f"- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {recommendation['duration']} –º–∏–Ω—É—Ç\n"
            f"- –°–æ–∂–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {recommendation['calories']} –∫–∫–∞–ª\n"
            f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: {temperature}¬∞C."
        )

# –†–∞—Å—á—ë—Ç –Ω–æ—Ä–º –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π
def calculate_water_and_calories(user):
    base_water = user["weight"] * 30  # –º–ª –Ω–∞ –∫–≥
    extra_water = (user["activity"] // 30) * 500  # 500 –º–ª –∑–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    city = user["city"]
    weather_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&appid={WEATHER_API_KEY}"
    response = requests.get(weather_url).json()
    temperature = response.get("main", {}).get("temp", 20)
    if temperature > 25:
        extra_water += 500
    water_goal = base_water + extra_water

    # –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
    calorie_goal = (10 * user["weight"] + 6.25 * user["height"] - 5 * user["age"] + 200) + (user["activity"] * 5)
    return water_goal, calorie_goal



async def get_answer(text):
       completion = await openai.ChatCompletion.acreate(
           model="gpt-3.5-turbo",
           messages=[{"role": "user", "content": text}]
       )
       return completion.choices[0].message["content"]

async def chat(update, context):
       try:
           user_message = update.message.text.replace('/chat', '').strip()
           if not user_message:
               await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /chat.")
               return
           response = await get_answer(user_message)
           await update.message.reply_text(response)
       except Exception as e:
           await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
def plot_progress_with_dates(data, dates, title, y_label):
    plt.figure(figsize=(10, 6))
    plt.plot(dates, data, marker='o', linestyle='-', color='blue')
    plt.title(title)
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel(y_label)
    plt.xticks(rotation=45)  # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    plt.grid(True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    return buffer

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def show_progress(update, context):
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    logged_water = users[user_id].get("logged_water_history", [])
    water_dates = users[user_id].get("logged_water_dates", [])
    logged_calories = users[user_id].get("logged_calories_history", [])
    calorie_dates = users[user_id].get("logged_calories_dates", [])

    if not logged_water and not logged_calories:
        await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    if logged_water:
        water_plot = plot_progress_with_dates(logged_water, water_dates, "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ", "–í–æ–¥–∞ (–º–ª)")
        await update.message.reply_photo(photo=InputFile(water_plot, filename="water_progress.png"))

    if logged_calories:
        calories_plot = plot_progress_with_dates(logged_calories, calorie_dates, "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º", "–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)")
        await update.message.reply_photo(photo=InputFile(calories_plot, filename="calories_progress.png"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã
async def log_water(update, context):
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile.")
        return

    try:
        amount = int(context.args[0])
        users[user_id]["logged_water"] += amount
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if "logged_water_history" not in users[user_id]:
            users[user_id]["logged_water_history"] = []
            users[user_id]["logged_water_dates"] = []
        users[user_id]["logged_water_history"].append(users[user_id]["logged_water"])
        users[user_id]["logged_water_dates"].append(datetime.now().strftime("%d-%m-%Y"))
        water_goal, _ = calculate_water_and_calories(users[user_id])
        remaining_water = max(0, water_goal - users[user_id]["logged_water"])
        await update.message.reply_text(f"–í—ã–ø–∏—Ç–æ: {users[user_id]['logged_water']} –º–ª –∏–∑ {water_goal} –º–ª.\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.")

    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>.")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Application 
application = Application.builder().token(TOKEN).build()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ
async def get_food_info(food_name):
    url = "https://trackapi.nutritionix.com/v2/natural/nutrients"
    headers = {
        "x-app-id": "af9ed57e",
        "x-app-key": "bc4bbfbb81351dfbde8884f8ddf9c859",
        "Content-Type": "application/json"
    }

    payload = {"query": food_name}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, data=json.dumps(payload)) as response:
            if response.status == 200:
                data = await response.json()
                return data
            else:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ"}

# –ü–µ—Ä–≤—ã–π —à–∞–≥: –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
async def log_food(update, context):
    user_input = " ".join(context.args)
    if not user_input:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü—Ä–∏–º–µ—Ä: /log_food —è–±–ª–æ–∫–æ")
        return ConversationHandler.END
    await update.message.reply_text(f"–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ '{user_input}'...")
    food_data = await get_food_info(user_input)
    if "error" in food_data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["food_data"] = food_data["foods"][0]
    food = food_data["foods"][0]
    food_name = food["food_name"]
    calories = food["nf_calories"]
    weight = food["serving_weight_grams"]

    await update.message.reply_text(
        f"{food_name.capitalize()} ‚Äî {calories} –∫–∫–∞–ª –Ω–∞ {weight} –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
    )

    return ENTER_WEIGHT

# –í—Ç–æ—Ä–æ–π —à–∞–≥: –≤–≤–æ–¥ –≤–µ—Å–∞
async def log_food_weight(update, context):
    try:
        weight = float(update.message.text)  # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ENTER_WEIGHT

    # –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    food = context.user_data["food_data"]
    calories_per_gram = food["nf_calories"] / food["serving_weight_grams"]
    total_calories = calories_per_gram * weight
    user_id = update.message.from_user.id
    if user_id not in users:
        users[user_id] = {
            "weight": 0,
            "height": 0,
            "age": 0,
            "activity": 0,
            "city": "",
            "logged_water": 0,
            "logged_calories": 0,
            "burned_calories": 0,
        }

    users[user_id]["logged_calories"] += total_calories

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if "logged_calories_history" not in users[user_id]:
        users[user_id]["logged_calories_history"] = []
        users[user_id]["logged_calories_dates"] = []
    users[user_id]["logged_calories_history"].append(users[user_id]["logged_calories"])
    users[user_id]["logged_calories_dates"].append(datetime.now().strftime("%d-%m-%Y"))
    await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories:.1f} –∫–∫–∞–ª.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
async def cancel(update, context):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler
application.add_handler(ConversationHandler(
    entry_points=[CommandHandler("log_food", log_food)],
    states={
        ENTER_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_food_weight)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async def log_workout(update, context):
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile.")
        return
    try:
        workout_type = context.args[0]
        duration = int(context.args[1])
        burned_calories = duration * 10  # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á—ë—Ç–∞
        extra_water = (duration // 30) * 200
        users[user_id]["burned_calories"] += burned_calories
        users[user_id]["logged_water"] += extra_water
        await update.message.reply_text(f"{workout_type.capitalize()} {duration} –º–∏–Ω—É—Ç ‚Äî {burned_calories} –∫–∫–∞–ª. –í—ã–ø–µ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {extra_water} –º–ª –≤–æ–¥—ã.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def check_progress(update, context):
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile.")
        return
    water_goal, calorie_goal = calculate_water_and_calories(users[user_id])
    logged_water = users[user_id].get("logged_water", 0)
    logged_calories = users[user_id].get("logged_calories", 0)
    burned_calories = users[user_id].get("burned_calories", 0)
    balance = logged_calories - burned_calories
    await update.message.reply_text(
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        f"–í–æ–¥–∞:\n- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª –∏–∑ {water_goal} –º–ª.\n- –û—Å—Ç–∞–ª–æ—Å—å: {max(0, water_goal - logged_water)} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories:.1f} –∫–∫–∞–ª –∏–∑ {calorie_goal:.1f} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories:.1f} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {balance:.1f} –∫–∫–∞–ª."
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("set_profile", set_profile)],
        states={
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, activity)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
        },
        fallbacks=[]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Document.IMAGE, fer))
    application.add_handler(CommandHandler("show_progress", show_progress))
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("chat", chat, block=False))
    application.add_handler(CommandHandler("log_water", log_water))
    application.add_handler(ConversationHandler(
       entry_points=[CommandHandler("log_food", log_food)],
       states={
           ENTER_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_food_weight)],
       },
       fallbacks=[CommandHandler("cancel", cancel)],
   ))
    application.add_handler(CommandHandler("log_workout", log_workout))
    application.add_handler(CommandHandler("check_progress", check_progress))
    application.add_handler(MessageHandler(filters.Document.IMAGE, fer))  # –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–π

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()